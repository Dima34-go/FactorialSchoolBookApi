// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	FactorialSchoolBook "FactorialSchoolBook"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user FactorialSchoolBook.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// CreateUserForTeacher mocks base method.
func (m *MockAuthorization) CreateUserForTeacher(user FactorialSchoolBook.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserForTeacher", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserForTeacher indicates an expected call of CreateUserForTeacher.
func (mr *MockAuthorizationMockRecorder) CreateUserForTeacher(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserForTeacher", reflect.TypeOf((*MockAuthorization)(nil).CreateUserForTeacher), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// GenerateTokenForTeacher mocks base method.
func (m *MockAuthorization) GenerateTokenForTeacher(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokenForTeacher", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTokenForTeacher indicates an expected call of GenerateTokenForTeacher.
func (mr *MockAuthorizationMockRecorder) GenerateTokenForTeacher(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokenForTeacher", reflect.TypeOf((*MockAuthorization)(nil).GenerateTokenForTeacher), username, password)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (FactorialSchoolBook.UserAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(FactorialSchoolBook.UserAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// ParseTokenForTeacher mocks base method.
func (m *MockAuthorization) ParseTokenForTeacher(token string) (FactorialSchoolBook.UserAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseTokenForTeacher", token)
	ret0, _ := ret[0].(FactorialSchoolBook.UserAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTokenForTeacher indicates an expected call of ParseTokenForTeacher.
func (mr *MockAuthorizationMockRecorder) ParseTokenForTeacher(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTokenForTeacher", reflect.TypeOf((*MockAuthorization)(nil).ParseTokenForTeacher), token)
}

// MockTodoCourse is a mock of TodoCourse interface.
type MockTodoCourse struct {
	ctrl     *gomock.Controller
	recorder *MockTodoCourseMockRecorder
}

// MockTodoCourseMockRecorder is the mock recorder for MockTodoCourse.
type MockTodoCourseMockRecorder struct {
	mock *MockTodoCourse
}

// NewMockTodoCourse creates a new mock instance.
func NewMockTodoCourse(ctrl *gomock.Controller) *MockTodoCourse {
	mock := &MockTodoCourse{ctrl: ctrl}
	mock.recorder = &MockTodoCourseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoCourse) EXPECT() *MockTodoCourseMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockTodoCourse) GetAll(userId int) ([]FactorialSchoolBook.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userId)
	ret0, _ := ret[0].([]FactorialSchoolBook.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTodoCourseMockRecorder) GetAll(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTodoCourse)(nil).GetAll), userId)
}

// GetAllForTeacher mocks base method.
func (m *MockTodoCourse) GetAllForTeacher(userId int) ([]FactorialSchoolBook.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForTeacher", userId)
	ret0, _ := ret[0].([]FactorialSchoolBook.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForTeacher indicates an expected call of GetAllForTeacher.
func (mr *MockTodoCourseMockRecorder) GetAllForTeacher(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForTeacher", reflect.TypeOf((*MockTodoCourse)(nil).GetAllForTeacher), userId)
}

// GetById mocks base method.
func (m *MockTodoCourse) GetById(userId, courseId int) (FactorialSchoolBook.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", userId, courseId)
	ret0, _ := ret[0].(FactorialSchoolBook.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockTodoCourseMockRecorder) GetById(userId, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockTodoCourse)(nil).GetById), userId, courseId)
}

// GetByIdForTeacher mocks base method.
func (m *MockTodoCourse) GetByIdForTeacher(userId, courseId int) (FactorialSchoolBook.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdForTeacher", userId, courseId)
	ret0, _ := ret[0].(FactorialSchoolBook.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdForTeacher indicates an expected call of GetByIdForTeacher.
func (mr *MockTodoCourseMockRecorder) GetByIdForTeacher(userId, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdForTeacher", reflect.TypeOf((*MockTodoCourse)(nil).GetByIdForTeacher), userId, courseId)
}

// MockTodoLesson is a mock of TodoLesson interface.
type MockTodoLesson struct {
	ctrl     *gomock.Controller
	recorder *MockTodoLessonMockRecorder
}

// MockTodoLessonMockRecorder is the mock recorder for MockTodoLesson.
type MockTodoLessonMockRecorder struct {
	mock *MockTodoLesson
}

// NewMockTodoLesson creates a new mock instance.
func NewMockTodoLesson(ctrl *gomock.Controller) *MockTodoLesson {
	mock := &MockTodoLesson{ctrl: ctrl}
	mock.recorder = &MockTodoLessonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoLesson) EXPECT() *MockTodoLessonMockRecorder {
	return m.recorder
}

// CreateLessonForTeacher mocks base method.
func (m *MockTodoLesson) CreateLessonForTeacher(lesson FactorialSchoolBook.Lesson, courseId, userId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLessonForTeacher", lesson, courseId, userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLessonForTeacher indicates an expected call of CreateLessonForTeacher.
func (mr *MockTodoLessonMockRecorder) CreateLessonForTeacher(lesson, courseId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLessonForTeacher", reflect.TypeOf((*MockTodoLesson)(nil).CreateLessonForTeacher), lesson, courseId, userId)
}

// GetAll mocks base method.
func (m *MockTodoLesson) GetAll(userId, courseId int) ([]FactorialSchoolBook.Lesson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userId, courseId)
	ret0, _ := ret[0].([]FactorialSchoolBook.Lesson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTodoLessonMockRecorder) GetAll(userId, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTodoLesson)(nil).GetAll), userId, courseId)
}

// GetAllForTeacher mocks base method.
func (m *MockTodoLesson) GetAllForTeacher(userId, courseId int) ([]FactorialSchoolBook.Lesson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForTeacher", userId, courseId)
	ret0, _ := ret[0].([]FactorialSchoolBook.Lesson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForTeacher indicates an expected call of GetAllForTeacher.
func (mr *MockTodoLessonMockRecorder) GetAllForTeacher(userId, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForTeacher", reflect.TypeOf((*MockTodoLesson)(nil).GetAllForTeacher), userId, courseId)
}

// GetById mocks base method.
func (m *MockTodoLesson) GetById(userId, courseId, lessonID int) (FactorialSchoolBook.Lesson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", userId, courseId, lessonID)
	ret0, _ := ret[0].(FactorialSchoolBook.Lesson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockTodoLessonMockRecorder) GetById(userId, courseId, lessonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockTodoLesson)(nil).GetById), userId, courseId, lessonID)
}

// GetByIdForTeacher mocks base method.
func (m *MockTodoLesson) GetByIdForTeacher(userId, courseId, lessonID int) (FactorialSchoolBook.Lesson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdForTeacher", userId, courseId, lessonID)
	ret0, _ := ret[0].(FactorialSchoolBook.Lesson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdForTeacher indicates an expected call of GetByIdForTeacher.
func (mr *MockTodoLessonMockRecorder) GetByIdForTeacher(userId, courseId, lessonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdForTeacher", reflect.TypeOf((*MockTodoLesson)(nil).GetByIdForTeacher), userId, courseId, lessonID)
}

// MockTodoLessonInfo is a mock of TodoLessonInfo interface.
type MockTodoLessonInfo struct {
	ctrl     *gomock.Controller
	recorder *MockTodoLessonInfoMockRecorder
}

// MockTodoLessonInfoMockRecorder is the mock recorder for MockTodoLessonInfo.
type MockTodoLessonInfoMockRecorder struct {
	mock *MockTodoLessonInfo
}

// NewMockTodoLessonInfo creates a new mock instance.
func NewMockTodoLessonInfo(ctrl *gomock.Controller) *MockTodoLessonInfo {
	mock := &MockTodoLessonInfo{ctrl: ctrl}
	mock.recorder = &MockTodoLessonInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoLessonInfo) EXPECT() *MockTodoLessonInfoMockRecorder {
	return m.recorder
}

// CheckAttendanceForTeacher mocks base method.
func (m *MockTodoLessonInfo) CheckAttendanceForTeacher(userId, courseId, lessonId int, Attendances []FactorialSchoolBook.LearnerAttendance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAttendanceForTeacher", userId, courseId, lessonId, Attendances)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAttendanceForTeacher indicates an expected call of CheckAttendanceForTeacher.
func (mr *MockTodoLessonInfoMockRecorder) CheckAttendanceForTeacher(userId, courseId, lessonId, Attendances interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAttendanceForTeacher", reflect.TypeOf((*MockTodoLessonInfo)(nil).CheckAttendanceForTeacher), userId, courseId, lessonId, Attendances)
}

// CheckHomeworkForTeacher mocks base method.
func (m *MockTodoLessonInfo) CheckHomeworkForTeacher(userId, courseId, lessonId int, allHomework []FactorialSchoolBook.LearnerHomework) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHomeworkForTeacher", userId, courseId, lessonId, allHomework)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHomeworkForTeacher indicates an expected call of CheckHomeworkForTeacher.
func (mr *MockTodoLessonInfoMockRecorder) CheckHomeworkForTeacher(userId, courseId, lessonId, allHomework interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHomeworkForTeacher", reflect.TypeOf((*MockTodoLessonInfo)(nil).CheckHomeworkForTeacher), userId, courseId, lessonId, allHomework)
}

// FinishLessonForTeacher mocks base method.
func (m *MockTodoLessonInfo) FinishLessonForTeacher(userId, courseId, lessonId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishLessonForTeacher", userId, courseId, lessonId)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishLessonForTeacher indicates an expected call of FinishLessonForTeacher.
func (mr *MockTodoLessonInfoMockRecorder) FinishLessonForTeacher(userId, courseId, lessonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishLessonForTeacher", reflect.TypeOf((*MockTodoLessonInfo)(nil).FinishLessonForTeacher), userId, courseId, lessonId)
}

// GetAttendance mocks base method.
func (m *MockTodoLessonInfo) GetAttendance(userId, courseId, lessonId int) (FactorialSchoolBook.LearnerStatusAtLesson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttendance", userId, courseId, lessonId)
	ret0, _ := ret[0].(FactorialSchoolBook.LearnerStatusAtLesson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttendance indicates an expected call of GetAttendance.
func (mr *MockTodoLessonInfoMockRecorder) GetAttendance(userId, courseId, lessonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttendance", reflect.TypeOf((*MockTodoLessonInfo)(nil).GetAttendance), userId, courseId, lessonId)
}

// GetAttendanceForTeacher mocks base method.
func (m *MockTodoLessonInfo) GetAttendanceForTeacher(userId, courseId, lessonId int) ([]FactorialSchoolBook.LearnerStatusAtLessonForTeacher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttendanceForTeacher", userId, courseId, lessonId)
	ret0, _ := ret[0].([]FactorialSchoolBook.LearnerStatusAtLessonForTeacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttendanceForTeacher indicates an expected call of GetAttendanceForTeacher.
func (mr *MockTodoLessonInfoMockRecorder) GetAttendanceForTeacher(userId, courseId, lessonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttendanceForTeacher", reflect.TypeOf((*MockTodoLessonInfo)(nil).GetAttendanceForTeacher), userId, courseId, lessonId)
}

// GetHomeTask mocks base method.
func (m *MockTodoLessonInfo) GetHomeTask(id, courseId, lessonId int) (FactorialSchoolBook.HomeTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHomeTask", id, courseId, lessonId)
	ret0, _ := ret[0].(FactorialSchoolBook.HomeTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHomeTask indicates an expected call of GetHomeTask.
func (mr *MockTodoLessonInfoMockRecorder) GetHomeTask(id, courseId, lessonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHomeTask", reflect.TypeOf((*MockTodoLessonInfo)(nil).GetHomeTask), id, courseId, lessonId)
}

// GetHomeTaskForTeacher mocks base method.
func (m *MockTodoLessonInfo) GetHomeTaskForTeacher(id, courseId, lessonId int) (FactorialSchoolBook.HomeTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHomeTaskForTeacher", id, courseId, lessonId)
	ret0, _ := ret[0].(FactorialSchoolBook.HomeTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHomeTaskForTeacher indicates an expected call of GetHomeTaskForTeacher.
func (mr *MockTodoLessonInfoMockRecorder) GetHomeTaskForTeacher(id, courseId, lessonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHomeTaskForTeacher", reflect.TypeOf((*MockTodoLessonInfo)(nil).GetHomeTaskForTeacher), id, courseId, lessonId)
}

// GetHomework mocks base method.
func (m *MockTodoLessonInfo) GetHomework(userId, courseId, lessonId int) (FactorialSchoolBook.Homework, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHomework", userId, courseId, lessonId)
	ret0, _ := ret[0].(FactorialSchoolBook.Homework)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHomework indicates an expected call of GetHomework.
func (mr *MockTodoLessonInfoMockRecorder) GetHomework(userId, courseId, lessonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHomework", reflect.TypeOf((*MockTodoLessonInfo)(nil).GetHomework), userId, courseId, lessonId)
}

// PostAttendance mocks base method.
func (m *MockTodoLessonInfo) PostAttendance(userId, courseId, lessonId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostAttendance", userId, courseId, lessonId)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostAttendance indicates an expected call of PostAttendance.
func (mr *MockTodoLessonInfoMockRecorder) PostAttendance(userId, courseId, lessonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAttendance", reflect.TypeOf((*MockTodoLessonInfo)(nil).PostAttendance), userId, courseId, lessonId)
}

// PostHomeTaskForTeacher mocks base method.
func (m *MockTodoLessonInfo) PostHomeTaskForTeacher(userId, courseId, lessonId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostHomeTaskForTeacher", userId, courseId, lessonId)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostHomeTaskForTeacher indicates an expected call of PostHomeTaskForTeacher.
func (mr *MockTodoLessonInfoMockRecorder) PostHomeTaskForTeacher(userId, courseId, lessonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostHomeTaskForTeacher", reflect.TypeOf((*MockTodoLessonInfo)(nil).PostHomeTaskForTeacher), userId, courseId, lessonId)
}

// PostHomework mocks base method.
func (m *MockTodoLessonInfo) PostHomework(userId, courseId, lessonId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostHomework", userId, courseId, lessonId)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostHomework indicates an expected call of PostHomework.
func (mr *MockTodoLessonInfoMockRecorder) PostHomework(userId, courseId, lessonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostHomework", reflect.TypeOf((*MockTodoLessonInfo)(nil).PostHomework), userId, courseId, lessonId)
}

// StartLessonForTeacher mocks base method.
func (m *MockTodoLessonInfo) StartLessonForTeacher(userId, courseId, lessonId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartLessonForTeacher", userId, courseId, lessonId)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartLessonForTeacher indicates an expected call of StartLessonForTeacher.
func (mr *MockTodoLessonInfoMockRecorder) StartLessonForTeacher(userId, courseId, lessonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLessonForTeacher", reflect.TypeOf((*MockTodoLessonInfo)(nil).StartLessonForTeacher), userId, courseId, lessonId)
}
